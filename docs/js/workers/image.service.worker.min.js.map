{"version":3,"sources":["src/js/image/image.service.worker.js","../../../src/js/image/image.service.worker.js"],"names":["f","define","amd","controllers","resize","src","blob","size","self","createImageBitmap","OffscreenCanvas","sendMessage","then","img","width","height","canvas","ctx","getContext","drawImage","convertToBlob","type","quality","resizedBlob","postMessage","addEventListener","event","id","data","options","mode","fetch","AbortController","controller","signal","response","error","console","log","request","XMLHttpRequest","open","responseType","onload","status","onerror","send","abort"],"mappings":";;;;;CAMC,SAASA,GAAmB,mBAATC,QAAqBA,OAAOC,IAAID,OAAOD,GAAGA,IAA9D,EAAoE,WAAY,aCNhF,IAAMG,EAAc,GAEpB,SAASC,EAAOC,EAAKC,EAAMC,GAC1B,IAAKC,KAAKC,oBAAsBD,KAAKE,gBACpC,OAAOC,EAAYN,EAAKC,GAEzBE,KAAKC,kBAAkBH,GAAMM,MAAK,SAASC,GAC1C,IAEIC,EAAQD,EAAIC,MACZC,EAASF,EAAIE,OACbD,EAAQC,EACPD,EALa,MAMhBC,GANgB,IAMMD,EACtBA,EAPgB,KAUbC,EATc,MAUjBD,GAViB,IAUKC,EACtBA,EAXiB,KAcnB,IAAMC,EAAS,IAAIN,gBAAgBI,EAAOC,GACpCE,EAAMD,EAAOE,WAAW,MAC9BF,EAAOF,MAAQA,EACfE,EAAOD,OAASA,EAChBE,EAAIE,UAAUN,EAAK,EAAG,EAAGC,EAAOC,GAChCC,EAAOI,cAAc,CAAEC,KAAM,aAAcC,QAAS,KAAOV,MAAK,SAASW,GACxEZ,EAAYN,EAAKkB,SAKpB,SAASZ,EAAYN,EAAKC,GACzBE,KAAKgB,YAAY,CAChBnB,IAAKA,EACLC,KAAMA,IAIRE,KAAKiB,iBAAiB,WAAW,SAASC,GACzC,IAAMC,EAAKD,EAAME,KAAKD,GAChBtB,EAAMqB,EAAME,KAAKvB,IACjBE,EAAOmB,EAAME,KAAKrB,KACxB,IAAIoB,GAAOtB,EAAX,CAQA,IAAMwB,EAAU,CACfC,KAAM,QAEP,GAAqB,mBAAVC,MAAsB,CAChC,GAAIvB,KAAKwB,gBAAiB,CACzB,IAAMC,EAAa,IAAID,gBACvBH,EAAQK,OAAUD,EAAWC,OAC7B/B,EAAYwB,GAAMM,EAGFF,MAAM1B,EAAKwB,GAC1BjB,MAAK,SAASuB,GACd,OAAOA,EAAS7B,UACd,SAAS8B,GACXC,QAAQC,IAAIF,MAEZxB,MAAK,SAASN,UACPH,EAAYwB,GACC,iBAATpB,EACVH,EAAOC,EAAKC,GAEZK,EAAYN,EAAKC,MAEhB,SAAS8B,GACXC,QAAQC,IAAIF,UAER,CACN,IAAMG,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOpC,GACpBkC,EAAQG,aAAe,OACvBH,EAAQI,OAAS,WACZJ,EAAQK,OAAS,MACA,iBAATrC,EACVH,EAAOC,EAAKC,MAEZK,EAAYN,EAAKC,QAMpBiC,EAAQM,QAAU,aAGlBN,EAAQO,YApDT,CACC,IAAMb,EAAa9B,EAAYwB,GAC3BM,GAEHA,EAAWc","file":"docs\\js\\workers\\image.service.worker.min.js","sourcesContent":[null,"const controllers = {};\r\n\r\nfunction resize(src, blob, size) {\r\n\tif (!self.createImageBitmap || !self.OffscreenCanvas) {\r\n\t\treturn sendMessage(src, blob);\r\n\t}\r\n\tself.createImageBitmap(blob).then(function(img) {\r\n\t\tconst MAX_WIDTH = 320;\r\n\t\tconst MAX_HEIGHT = 240;\r\n\t\tlet width = img.width;\r\n\t\tlet height = img.height;\r\n\t\tif (width > height) {\r\n\t\t\tif (width > MAX_WIDTH) {\r\n\t\t\t\theight *= MAX_WIDTH / width;\r\n\t\t\t\twidth = MAX_WIDTH;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (height > MAX_HEIGHT) {\r\n\t\t\t\twidth *= MAX_HEIGHT / height;\r\n\t\t\t\theight = MAX_HEIGHT;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst canvas = new OffscreenCanvas(width, height);\r\n\t\tconst ctx = canvas.getContext('2d');\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\t\tctx.drawImage(img, 0, 0, width, height);\r\n\t\tcanvas.convertToBlob({ type: 'image/jpeg', quality: 0.9 }).then(function(resizedBlob) {\r\n\t\t\tsendMessage(src, resizedBlob);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction sendMessage(src, blob) {\r\n\tself.postMessage({\r\n\t\tsrc: src,\r\n\t\tblob: blob\r\n\t});\r\n}\r\n\r\nself.addEventListener('message', function(event) {\r\n\tconst id = event.data.id;\r\n\tconst src = event.data.src;\r\n\tconst size = event.data.size;\r\n\tif (id && !src) {\r\n\t\tconst controller = controllers[id];\r\n\t\tif (controller) {\r\n\t\t\t// console.log('Aborting', id);\r\n\t\t\tcontroller.abort();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\tconst options = {\r\n\t\tmode: 'cors', // no-cors, *cors, same-origin\r\n\t};\r\n\tif (typeof fetch === 'function') {\r\n\t\tif (self.AbortController) {\r\n\t\t\tconst controller = new AbortController();\r\n\t\t\toptions.signal =  controller.signal;\r\n\t\t\tcontrollers[id] = controller;\r\n\t\t\t// console.log('AbortController', id);\r\n\t\t}\r\n\t\tconst response = fetch(src, options)\r\n\t\t\t.then(function(response) {\r\n\t\t\t\treturn response.blob();\r\n\t\t\t}, function(error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t})\r\n\t\t\t.then(function(blob) {\r\n\t\t\t\tdelete controllers[id];\r\n\t\t\t\tif (typeof size === 'object') {\r\n\t\t\t\t\tresize(src, blob, size);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsendMessage(src, blob);\r\n\t\t\t\t}\r\n\t\t\t}, function(error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t} else {\r\n\t\tconst request = new XMLHttpRequest();\r\n\t\trequest.open('GET', src);\r\n\t\trequest.responseType = 'blob';\r\n\t\trequest.onload = function() {\r\n\t\t\tif (request.status < 300) {\r\n\t\t\t\tif (typeof size === 'object') {\r\n\t\t\t\t\tresize(src, blob, size);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsendMessage(src, blob);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// new Error('Image didn\\'t load successfully; error code:' + request.statusText);\r\n\t\t\t}\r\n\t\t};\r\n\t\trequest.onerror = function() {\r\n\t\t\t// new Error('There was a network error.');\r\n\t\t};\r\n\t\trequest.send();\r\n\t}\r\n});\r\n\r\n/*\r\nself.addEventListener('message', function(event) {\r\n\t// console.log(event);\r\n\tconst src = event.data;\r\n\tconst response = fetch(src).then(function(response) {\r\n\t\treturn response.blob();\r\n\t}).then(function(blob) {\r\n\t\t// Send the image data to the UI thread!\r\n\t\tself.postMessage({\r\n\t\t\tsrc: src,\r\n\t\t\tblob: blob,\r\n\t\t});\r\n\t});\r\n});\r\n*/\r\n"]}